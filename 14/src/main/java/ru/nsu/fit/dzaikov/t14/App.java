/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.nsu.fit.dzaikov.t14;

import java.util.concurrent.Semaphore;

public class App {
    public static void main(String[] args) {
        Semaphore semA = new Semaphore(0);
        Semaphore semB = new Semaphore(0);
        Semaphore semC = new Semaphore(0);

        Thread a = new Thread(()->{
            while (!Thread.currentThread().isInterrupted()) {
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    break;
                }
                System.out.println("+1 part A");
                semA.release();
            }
        });

        Thread b = new Thread(()->{
            while (!Thread.currentThread().isInterrupted()) {
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException e) {
                    break;
                }
                System.out.println("+1 part B");
                semB.release();
            }
        });

        Thread c = new Thread(()->{
            while (!Thread.currentThread().isInterrupted()) {
                try {
                    semA.acquire();
                    semB.acquire();
                    Thread.sleep(3000);
                } catch (InterruptedException e) {
                    break;
                }
                System.out.println("+1 module C");
                semC.release();
            }
        });

        Thread widget = new Thread(()->{
            while (!Thread.currentThread().isInterrupted()) {
                try {
                    semC.acquire();
                } catch (InterruptedException e) {
                    break;
                }
                System.out.println("+1 widget");
            }
        });

        a.start();
        b.start();
        c.start();
        widget.start();

        try {
            Thread.sleep(10000);
            widget.interrupt();
            widget.join();
            c.interrupt();
            c.join();
            a.interrupt();
            a.join();
            b.interrupt();
            b.join();
        } catch (InterruptedException ignored) {

        }
    }
}
